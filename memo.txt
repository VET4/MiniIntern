[미니인턴 수행과제 정리]

* 루시드차트 링크
https://lucid.app/documents#/documents?folder_id=home
* 마크다운 사용법
https://heropy.blog/2017/09/30/markdown/
* 블록킹과 논블록킹
https://m.blog.naver.com/PostView.naver?isHttpsRedirect=true&blogId=mikael2010&logNo=130094384689
* 변수,상수,모듈 등 설명
https://hizino.tistory.com/entry/Veriliog-%EC%83%81%EC%88%98-%EC%84%A0%EC%96%B8-%EB%AA%A8%EB%93%88-%ED%8F%AC%ED%8A%B8
https://blog.naver.com/PostView.naver?blogId=culonion&logNo=80023894719
* 7-segment 참고
https://nate9389.tistory.com/105

* 본과제: 7-segment 구현하기
    - 7-segment 정의
        - cathod type으로 정의
        0: {1, 1, 1, 1, 1, 1, 0, 0}
        1: {0, 1, 1, 0, 0, 0, 0, 0}
        2: {1, 1, 0, 1, 1, 0, 1, 0}
        3: {1, 1, 1, 1, 0, 0, 1, 0}
        4: {0, 1, 1, 0, 0, 1, 1, 0}
        5: {1, 0, 1, 1, 0, 1, 1, 0}
        6: {1, 0, 1, 1, 1, 1, 1, 0}
        7: {1, 1, 1, 0, 0, 0, 0, 0}
        8: {1, 1, 1, 1, 1, 1, 1, 0}
        9: {1, 1, 1, 1, 0, 1, 1, 0}
    - Testbench 세팅
        1. 인풋, 아웃풋 설정
            - clk, rst, seg
        2. 클럭 설정: 1s/1ms
    - DUT(Design Under Test) 세팅
        1. 인풋, 아웃풋 설정
        2. 7-segment 진리표 작성
        3. case문 작성 (또는 else if 또는 삼항연산자)
        4. 마지막에 값 할당

* 추가 과제1: 3자리수 표기하기
    - Testbench 세팅
        1. 인풋, 아웃풋 설정
            - clk, rst, seg0, seg1, seg2
        2. 클럭 설정: 1s/1ms
    - DUT(Design Under Test) 세팅
        1. 인풋, 아웃풋 설정
        2. 본과제의 카운트 기능 그대로 사용

* 추가 과제2: 분과 초를 표기하기
    - Testbench 세팅
        1. 인풋, 아웃풋 설정
            - clk, rst, seg0, seg1, seg2
        2. 클럭 설정: 1s/1ms
    - DUT(Design Under Test) 세팅
        1. 인풋, 아웃풋 설정
        2. 과제2의 기능 그대로 사용
        3. dsplay로 분과 초 표시
        4. 그냥 표시하면 크기로 인해 공백이 많이 발생
            -> ascii 코드 문자열로 처리할 예정
        
* case 메모
        8'b11111100 : convert <= "0";//0
		8'b01100000 : convert <= "1";//1
		8'b11011010 : convert <= "2";//2
		8'b11110010 : convert <= "3";//3
		8'b01100110 : convert <= "4";//4
		8'b10110110 : convert <= "5";//5
		8'b10111110 : convert <= "6";//6
		8'b11100000 : convert <= "7";//7
		8'b11111110 : convert <= "8";//8
		8'b11100110 : convert <= "9";
		8'b00000000 : convert <= "ERROR";

* 과제 2 설계
    - idea 1) 다중 if문
        - count0 가 +1 카운트
        - count0 9 넘어가면 count1 +1 카운트 count0 0 초기화
        - count1 9 넘어가면 count2 +1 카운트 count0 0 초기화
        - count2 9 넘어가면 전부 초기화
    - idea 2) %로 잘라내기

* display 함수로 분과 초 표기하기
    - 그 동안 생각한 것
        - 단순 testbench에서 display 쓸 생각만함
        - 어떻게 하면 dut 내부 변수를 가져올 것인가
    - 해결법
        - 그냥 dut내부에서 display 함수 호출하면 됨